# Circuit examples for ZK Hack Lisbon 2023
A short demo of reference examples to give inspiration for ZK Hack Lisbon 2023. This repo contains example
implementations of an adder and proof-of-inclusion in a merkle tree in Circom, Risc-0, and Noir.

## Circom
To get started with Circom, follow the installation instructions in the [Circom
docs](https://docs.circom.io/getting-started/installation/#important-deprecation-note), reiterated here for conciseness.
```bash
git clone https://github.com/iden3/circom.git
cd circom
echo -e "\n\this may take several minutes...\n\n"
cargo build --release -q
cargo install --path circom
npm install -g snarkjs
``` 

Once you've written a circuit, compile it:
```bash
MY_CIRCUIT=dot_product
mkdir target
circom $MY_CIRCUIT.circom --r1cs --wasm --sym -o target/
```

Now we may compute the witness, the private data satifying the circuit:
```bash
node generate_winess.js $MY_CIRCUIT.wasm input.json witness.wtns
```
computing the witness: todo
Finally, for Groth16, we must set up a Shared Reference String (SRS). The following runs a trusted ceremony to generate
the SRS:
```
snarkjs powersoftau new bn128 12 pot12_0000.ptau -v
# contribute randomness
snarkjs powersoftau contribute pot12_0000.ptau pot12_0001.ptau --name="First contribution" -v

# Now, we have the contributions to the powers of tau in the file pot12_0001.ptau and we can proceed with the Phase 2.
# The phase 2 is circuit-specific. Execute the following command to start the generation of this phase:
snarkjs powersoftau prepare phase2 pot12_0001.ptau pot12_final.ptau -v
# Next, we generate a .zkey file that will contain the proving and verification keys together with all phase 2 contributions
snarkjs groth16 setup $MY_CIRCUIT.r1cs pot12_final.ptau $MY_CIRCUIT_0000.zkey
# Contribute to phase 2 of the ceremony:
snarkjs zkey contribute multiplier2_0000.zkey multiplier2_0001.zkey --name="1st Contributor Name" -v
# Export the verification key:
snarkjs zkey export verificationkey multiplier2_0001.zkey verification_key.json
# Generate the proof 
snarkjs groth16 prove multiplier2_0001.zkey witness.wtns proof.json public.json
```

All together: 

```bash
# Install
git clone https://github.com/iden3/circom.git
cd circom
echo -e "\n\this may take several minutes...\n\n"
cargo build --release -q
cargo install --path circom
npm install -g snarkjs

# Compile
MY_CIRCUIT=dot_product
mkdir target
circom $MY_CIRCUIT.circom --r1cs --wasm --sym -o target/
# Generate Witness
node generate_winess.js $MY_CIRCUIT.wasm input.json witness.wtns
# Start Trusted Setup
snarkjs powersoftau new bn128 12 pot12_0000.ptau -v
# Contribute randomness
snarkjs powersoftau contribute pot12_0000.ptau pot12_0001.ptau --name="First contribution" -v
# Start generation phase
snarkjs powersoftau prepare phase2 pot12_0001.ptau pot12_final.ptau -v
# Generate a .zkey file that will contain the proving and verification keys together with all phase 2 contributions
snarkjs groth16 setup $MY_CIRCUIT.r1cs pot12_final.ptau $MY_CIRCUIT_0000.zkey
# Contribute to phase 2 of the ceremony:
snarkjs zkey contribute ${MY_CIRCUIT}_0000.zkey ${MY_CIRCUIT}_0001.zkey --name="1st Contributor Name" -v
# Export the verification key:
snarkjs zkey export verificationkey ${MY_CIRCUIT}_0001.zkey verification_key.json

# Generate the proof 
snarkjs groth16 prove ${MY_CIRCUIT}_0001.zkey witness.wtns proof.json public.json
# Verify the proof
snarkjs groth16 verify verification_key.json public.json proof.json
```


